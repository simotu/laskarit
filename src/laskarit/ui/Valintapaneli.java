/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package laskarit.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.Timer;

/**
 * Valintapaneli toteuttaa pelin valinnan.
 * @author simo
 */
public class Valintapaneli<E extends Valinta> extends javax.swing.JPanel {

    private final E[] valinnat;
    private final Valintakuuntelija kuuntelija;
    private final Timer timerAnimaatio;

    private Point mousePoint;
    private int mouseOverIndex = -1;

    public Valintapaneli(E[] valinnat, Valintakuuntelija kuuntelija) {
        this.valinnat = valinnat;
        this.kuuntelija = kuuntelija;
        initComponents();
        MouseAdapter mouseListener = new MouseAdapter() {

            @Override
            public void mouseExited(MouseEvent e) {
                mouseOverIndex = -1;
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                mousePoint = e.getPoint();
                mouseOverIndex = jListValinta.locationToIndex(mousePoint);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                if(e.getButton() == MouseEvent.BUTTON1)
                    valintaTehty(jListValinta.locationToIndex(e.getPoint()));
            }

        };
        jListValinta.addMouseListener(mouseListener);
        jListValinta.addMouseMotionListener(mouseListener);
        timerAnimaatio = new Timer(50, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                jListValinta.repaint();
            }
        });
    }

    private void valintaTehty(int valinta) {
        kuuntelija.valintaTehty(valinnat[valinta]);
    }


    /**
     * Aktivoi paneelin animaation.
     */
    public void aktivoi() {
        timerAnimaatio.start();
    }

    /**
     * Pysäyttää paneelin animaation.
     */
    public void deaktivoi() {
        timerAnimaatio.stop();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListValinta = new javax.swing.JList<E>();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(400, 134));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setOpaque(false);

        jListValinta.setModel(new ValintaListModel());
        jListValinta.setCellRenderer(new ValintaCellRenderer());
        jScrollPane1.setViewportView(jListValinta);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<E> jListValinta;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private class ValintaCellRenderer extends Component implements ListCellRenderer<E> {

        private E value;
        private int index;
        private final Font otsikkoFont;
        private final Font seliteFont;
        private boolean mouseOn;
        
        public ValintaCellRenderer() {
            otsikkoFont = Font.decode("Times New Roman-PLAIN-18");
            seliteFont = Font.decode(null);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends E> list, E value, int index, boolean isSelected, boolean cellHasFocus) {
            this.value = value;
            this.index = index;
            this.mouseOn = (mouseOverIndex == index);
            return this;
        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(300, 30);
        }

        @Override
        public void paint(Graphics g) {
            int w = getWidth();
            int h = getHeight();
            if(mouseOn) {
                g.setColor(Color.white);
                g.fill3DRect(0, 0, w, h, false);
            }
            else {
                g.setColor(Color.white);
                g.fillRect(0, 0, w, h);
            }
            g.setColor(Color.blue);
            g.setFont(otsikkoFont);
            FontMetrics fm = g.getFontMetrics();
            double time = System.currentTimeMillis();
            int x = (int)(Math.sin(Math.PI * (double)time / 2000 + (double)index * Math.PI / 10)*10);
            g.drawString(value.annaOtsikko(), x + 25, h - 5);
            g.setFont(seliteFont);
            g.drawString(value.annaSelite(), 200, h - 5);
        }

    }

    private class ValintaListModel extends AbstractListModel<E> {

        public ValintaListModel() {
        }

        @Override
        public int getSize() {
            return valinnat.length;
        }

        @Override
        public E getElementAt(int index) {
            return valinnat[index];
        }

    }
}
